%YAML 1.2
---
name: C++14
file_extentions: [cpp, h, hpp]
scope: source.c++

variables:
  name: '[_a-zA-Z]\w*'

contexts:
  main:
    - include: beginPreprocessor
    - include: nonPreproc

  nonPreproc:
    - include: beginLineComment
    - include: beginBlockComment
    - include: controlKeywords
    - include: castOperatorKeywords
    - include: operatorKeywords
    - include: storageTypes
    - include: storageModifiers
    - include: languageConstants
    - include: supportTypes
    - include: supportConstants
    - include: languageVariables
    - include: numericLiterals
    - include: beginString
    - include: beginRawString
    - include: beginCharLiteral
    - include: function
    - include: beginNamespace

  beginLineComment:
    - match: (?=//)
      push: lineComment

  lineComment:
    - meta_scope: comment.line.double-slash.c++
    - match: (?<!/)(?=//(?:/[^/]|!))
      push: lineDocumentation
    - match: $
      pop: true

  lineDocumentation:
    - include: doxygen
    - match: (?=$)
      pop: true

  beginBlockComment:
    - match: (?=/\*)
      push: blockComment

  blockComment:
    - meta_scope: comment.block.c++
    - match: (?=/\*(?:\*[^\*]|!))
      push: blockDocumentation
    - match: (?<!/)\*/
      pop: true

  blockDocumentation:
    - include: doxygen
    - match: (?=\*/)
      pop: true

  doxygen:
    - match: '[@\\](?:(?:{|}|f\$|f\[|f\]|\$|@|\\|&|~|<|>|#|%|"|\.|::|\||-{2,3})|(?:a|addindex|addtogroup|anchor|arg|attention|author|authors|b|brief|bug|c|callergraph|callgraph|category|cite|class|code|cond|copybrief|copydetails|copydoc|copyright|date|def|defgroup|deprecated|details|diafile|dir|docbookonly|dontinclude|dot|dotfile|e|else|elseif|em|endcode|endcond|enddocbookonly|enddot|endhtmlonly|endif|endinternal|endlatexonly|endlink|endmanonly|endmsc|endparblock|endrtfonly|endsecreflist|endverbatim|enduml|endxmlonly|enum|example|exception|extends|file|fn|headerfile|hidecallergraph|hidecallgraph|hideinitializer|htmlinclude|htmlonly|idlexcept|if|ifnot|image|implements|include|includelineno|ingroup|internal|invariant|interface|latexinclude|latexonly|li|line|link|mainpage|manonly|memberof|msc|mscfile|n|name|namespace|nosubgrouping|note|overload|p|package|page|par|paragraph|parblock|post|pre|private|privatesection|property|protected|protectedsection|protocol|public|publicsection|pure|ref|refitem|related|relates|relatedalso|relatesalso|remark|result|return|returns|retval|rtfonly|sa|secreflist|section|see|short|showinitializer|since|skip|skipline|snippet|startuml|struct|subpage|subsection|subsubsection|tableofcontents|test|throw|throws|todo|tparam|typedef|union|until|var|verbatim|verbinclude|version|vhdlflow|warning|weakgroup|xmlonly|xrefitem)\b)'
      scope: keyword.other.documentation.doxygen
    - match: '([@\\]param)\b(?:\s*(\[(?:in|in,out|out)\]))?'
      captures:
        0: keyword.other.documentation.doxygen
        1: keyword.other.documentation.doxygen

  beginPreprocessor:
    - match: (?=#)
      push: preprocessor

  # TODO: don't include nonPreproc in warning or error (but do include comments)
  preprocessor:
    - match: '#\s*(define|elif|else|endif|error|if|ifdef|ifndef|line|pragma|undef|warning)\b'
      captures:
        1: keyword.control.preprocessor.c++
    - include: beginInclude
    - include: nonPreproc
    - match: (?<!\\)\n
      pop: true

  beginInclude:
    - match: '#\s*(include)\b'
      captures:
        1: keyword.control.preprocessor.include.c++
      push: include

  include:
    - include: beginAngleBracketsInclude
    - include: beginQuotesInclude
    - include: beginLineComment
    - include: beginBlockComment
    - match: (?<!\\)(?=\n)
      pop: true

  beginAngleBracketsInclude:
    - match: '<'
      push: angleBracketsInclude

  angleBracketsInclude:
    - meta_scope: string.quoted.other.lt-gt.include.c++
    - match: '>'
      pop: true

  beginQuotesInclude:
    - match: '"'
      push: quotesInclude

  quotesInclude:
    - meta_scope: string.quoted.double.include.c++
    - match: '"'
      pop: true

  controlKeywords:
    - match: \b(?:alignas|alignof|asm|break|case|catch|continue|default|delete|do|else|explicit|export|extern|for|friend|goto|if|inline|new|noexcept|operator|private|protected|public|return|sizeof|static_assert|switch|throw|try|typedef|using|virtual|while)\b
      scope: keyword.control.c++

  castOperatorKeywords:
    - match: \b(?:const_cast|dynamic_cast|reinterpret_cast|static_cast)\b
      scope: keyword.operator.cast.c++

  operatorKeywords:
    - match: \b(?:and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq)\b
      scope: keyword.operator.c++

  storageTypes:
    - match: \b(?:auto|bool|char|char16_t|char32_t|decltype|double|float|int|long|short|signed|unsigned|void|wchar_t)\b
      scope: storage.type.c++

  storageModifiers:
    - match: \b(?:const|constexpr|mutable|register|static|thread_local|typename|volatile)\b
      scope: storage.modifier.c++

  languageConstants:
    - match: \b(?:__func__|false|nullptr|true)\b
      scope: constant.language.c++

  supportTypes:
    - match: \b(?:int8_t|int16_t|int32_t|int64_t|int_fast8_t|int_fast16_t|int_fast32_t|int_fast64_t|int_least8_t|int_least16_t|int_least32_t|int_least64_t|intmax_t|intptr_t|size_t|uint|uint8_t|uint16_t|uint32_t|uint64_t|uint_fast8_t|uint_fast16_t|uint_fast32_t|uint_fast64_t|uint_least8_t|uint_least16_t|uint_least32_t|uint_least64_t|uintmax_t|uintptr_t)\b
      scope: support.type.c++

  supportConstants:
    - match: \b(?:__FILE__|__FUNCTION__|__LINE__)\b
      scope: support.constant.c++

  languageVariables:
    - match: \bthis\b
      scope: variable.language.c++

  # TODO: should numbers like "1f" be highlighted?
  numericLiterals:
    - match: (?<!['\.])(?:(?:(?:\b\d(?:[\d']*\d)?\.\d(?:[\d']*\d)?|\B\.\d(?:[\d']*\d)?)(?:[Ee][+-]?\d(?:[\d']*\d)?)?(?:[fFlL]|(?:i[fl]?|h|min|[mun]?s|_\w*))?\b|(?:\b\d(?:[\d']*\d)?\.)(?:\B|(?:[fFlL]|(?:i[fl]?|h|min|[mun]?s|_\w*))\b|(?:[Ee][+-]?\d(?:[\d']*\d)?)(?:[fFlL]|(?:i[fl]?|h|min|[mun]?s|_\w*))?\b)|\b\d(?:[\d']*\d)?(?:[Ee][+-]?\d(?:[\d']*\d)?)(?:[fFlL]|(?:i[fl]?|h|min|[mun]?s|_\w*))?\b)|\b(?:(?:[1-9](?:[\d']*\d)?|0(?:[0-7']*[0-7])?|0[Xx][\da-fA-F](?:[\da-fA-F']*[\da-fA-F])?|0[Bb][01](?:[01']*[01])?)(?:(?:l{1,2}|L{1,2})[uU]?|[uU](?:l{0,2}|L{0,2})|(?:i[fl]?|h|min|[mun]?s|_\w*))?)\b)(?!\.)
      scope: constant.numeric.c++

  escapeChars:
    - match: \\(?:[\'"\?\\abfnrtv]|[0-7]{1,3}|x[\da-fA-F]+|u[\da-fA-F]{4}|U[\da-fA-F]{8})
      scope: constant.character.escape.c++

  invalidEscapeChars:
    - match: \\(?:[^\'"\?\\abfnrtvxuU0-7]|x[^\da-fA-F]|u[\da-fA-F]{0,3}[^\da-fA-F]|U[\da-fA-F]{0,7}[^\da-fA-F])
      scope: invalid.illegal.unknown-escape.c++

  beginString:
    - match: '(?:L|u8|u|U)?"'
      scope: punctuation.definition.string.begin.c++
      push: string

  string:
    - meta_scope: string.quoted.double.c++
    - include: escapeChars
    - include: invalidEscapeChars
    - match: '"'
      scope: punctuation.definition.string.end.c++
      pop: true

  beginRawString:
    - match: '(?:L|u8|u|U)?R"([^\(\)\\ ]{0,16})\('
      scope: punctuation.definition.string.begin.c++
      push: rawString

  rawString:
    - meta_scope: string.quoted.double.c++
    - match: '\)\1"'
      scope: punctuation.definition.string.end.c++
      pop: true

  beginCharLiteral:
    - match: "(?:L|u8|u|U)?'"
      scope: punctuation.definition.string.begin.c++
      push: charLiteral

  charLiteral:
    - meta_scope: string.quoted.single.c++
    - include: escapeChars
    - include: invalidEscapeChars
    - match: "'"
      scope: punctuation.definition.string.end.c++
      pop: true

  # TODO: match template functions
  # TODO: match comment between name and paren?
  function:
    - match: ({{name}})(?=(?:::{{name}})*\s*\()
      captures:
        1: entity.name.function.c++

  beginNamespace:
    - match: \bnamespace\b
      captures:
        0: keyword.control.c++
      push: namespace

  namespace:
    - match: \b{{name}}\b
      scope: entity.name.type.c++
    - include: beginLineComment
    - include: beginBlockComment
    - match: (?=;|{)
      pop: true
